#!/usr/bin/env python3

"""
This module is a reimpementation of the ancient cgvg perl scripts.

Visit https://github.com/vrothberg/vgrep for more information.
"""

# (c) 2015 Valentin Rothberg <valentinrothberg@gmail.com>
#
# Licensed under the terms of the GNU GPL License version 3

# Ignore some annoying pylint warnings
# pylint: disable=W0613
# pylint: disable=W0141

import argparse
import os
import sys
import pickle
import re
import signal

from array import array
from pipes import quote
from subprocess import Popen, PIPE, STDOUT
from itertools import takewhile

try:
    import readline
except ImportError:
    pass

try:
    from pygments import highlight
    from pygments.lexers import guess_lexer_for_filename, guess_lexer
    from pygments.formatters.terminal import TerminalFormatter
    PYGMENTS_AVAILABLE = True
except ImportError:
    PYGMENTS_AVAILABLE = False


HOMEDIR = os.getenv("HOME")
CACHE = HOMEDIR + "/.cache/vgrep"
EDITOR = os.getenv("EDITOR", "vim")

ANSI_REG = re.compile(r'\x1B\[[0-9;]*[ABCDEFGHJKSTfmnsulh]')



def parse_options():
    """
    User interface of this module.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--show', dest='show', action='store',
                        default=False, nargs='?',
                        help="show indexed location in the system's editor")
    parser.add_argument('--no-git', dest='nogit', action='store_true',
                        default=False,
                        help="use 'grep' instead of 'git grep'")
    parser.add_argument('--no-git-submodules', dest='nogitsubmodules',
                        action='store_true', default=False,
                        help="do not search in git submodules")
    parser.add_argument('--no-less', dest='noless', action='store_true',
                        default=False,
                        help="print to stdout instead of using less")
    parser.add_argument('--no-header', dest='noheader', action='store_true',
                        default=False,
                        help="do not print the pretty header at the top of "
                             "the results")
    parser.add_argument('--no-highlight', dest='nohighlight', action='store_true',
                        default=False,
                        help="do not syntax highlight code")

    args, gitargs = parser.parse_known_args()
    return args, gitargs


def parse_line(sloc):
    """
    Returns indices of first and second delimiter of the input line.
    Delimiters are `\0', `:', `-'.

    One or both indices can be -1.
    """

    lfile = sloc.find('\0')
    if lfile == -1:
        lfile = sloc.find(':')
    lline = sloc.find('\0', lfile+1)
    if lline == -1 or not sloc[lfile+1:lline].isdigit():
        lline = sloc.find(':', lfile+1)
    if lline == -1 or not sloc[lfile+1:lline].isdigit():
        lline = sloc.find('-', lfile+1)

    return lfile, lline


def main():
    """
    Main routine of this module.
    """
    args, gitargs = parse_options()
    if args.nohighlight:
        global PYGMENTS_AVAILABLE
        PYGMENTS_AVAILABLE = False

    if gitargs:
        gitargs = ["'%s'" % x for x in gitargs]  # needed to pass args to grep
        grep_args = " ".join(gitargs)

        slocs = grep(grep_args, args.nogit, args.nogitsubmodules)
        slocs = [x for x in slocs if x]  # filter empty hits
        if not slocs:
            # dump and exit if there is not hit
            dump(slocs)
            sys.exit(0)

        # test ouput format of grep
        test = rem_ansi(slocs[0])
        if not re.match(r"^[^:\0]+[:\0]\d+[\0:-].*$", test):
            sys.stderr.write("Wrong format from (git) grep: '%s'\n" % test)
            sys.stderr.write("vgrep expects the format '%s:%s:%s' or '%s\\0%s\\0%s'\n"
                             % (blu('file'), green('line'), 'content',
                                blu('file'), green('line'), 'content'))
            sys.exit(1)

        dump(slocs)

    else:
        slocs = load()
        if not slocs:
            sys.exit("Could not load cached data")
        cwd = rem_ansi(slocs.pop(0))
        if cwd != os.getcwd():
            sys.exit("Change directory to %s to show locations" % cwd)
        if slocs is None:
            sys.exit("Please grep for a symbol first")

    if (gitargs and args.show is None) or args.show is False:
        try:
            print_slocs(slocs, None, args)
        except IOError:
            pass

    ret = None
    # -s given but no show string given
    if args.show is None:
        show_help = True
        while True:
            try:
                show_expr = ask_show_expr(show_help)
            except EOFError:
                break
            show_help = False
            dispatch_show_expr(show_expr, slocs, args)
    elif args.show:
        ret = dispatch_show_expr(args.show, slocs, args)

    if ret == error:
        sys.exit(-1)


def ask_show_expr(verbose=False):
    """
    Prompts the user for a show expression. If verbose is given, a short help is
    printed beforehand.
    """
    if verbose:
        print("help: <Selector><Cmd>")
        print("      Selector: ",
              yel("`3'"), "(one)",
              yel("`5,23'"), "(mult.)",
              yel("`7-10'"), "(range)",
              yel("`/ker.el/'"), "(regex)")
        print("      Cmd: ",
              yel("p") + "rint,",
              yel("s") + "how,",
              yel("c") + "ontext,",
              yel("t") + "ree,",
              yel("d") + "elete,",
              yel("f") + "iles,",
              "e" + yel("x") + "ecute,",
              yel("q") + "uit,")
        print('      E.g.: 40,45s -- show matches 40 and 45 in $EDITOR')

    return input(green("What do you want to see?> "))


def dispatch_show_expr(show_expr, slocs, options):
    """
    Parses and executes a show expression.
    """
    try:
        indices, cmd, cmd_arg = parse_show(show_expr, slocs)
    except (ValueError, IndexError, AssertionError) as ex:
        return error("parse error: " + str(ex))

    options.show_cmds = {
        's': show_cmd_open,
        'p': show_cmd_print,
        'd': show_cmd_delete,
        'P': show_cmd_print_and_save,
        'c': show_cmd_context,
        'x': show_cmd_execute,
        'f': show_cmd_files,
        'q': show_cmd_quit,
        'h': show_cmd_help,
        'g': show_cmd_grep,
        't': show_cmd_tree,
    }
    if cmd not in options.show_cmds:
        return error("Command not implemented: %s" % cmd)
    return options.show_cmds[cmd](slocs, indices, cmd_arg, options)


class cmd_output:
    """The cmd_output class is used to abstract columnized output to
       console or less. This class should be used with a
       'with'-expression.
    """
    def __init__(self, options, columns = []):
        self.options = options
        self.columns = columns

    def __enter__(self):
        header = self.set_columns(self.columns)

        # Start less if necessary
        self.popen = None
        self.fdc = sys.stdout
        if self.options.noless is False:
            signal.signal(signal.SIGINT, signal.SIG_IGN)
            self.popen = Popen("less -FRXS", shell=True, stdin=PIPE)
            self.fdc = self.popen.stdin

        # Write the aligned header of the output
        if not self.options.noheader and header:
            self.write(header[:-1] + "\n")

        return self

    def set_columns(self, columns):
        self.columns = columns
        idx = 0
        header = ""
        format_str_light = u""
        format_str_bold  = u""

        for col in self.columns:
            align = "right"
            if len(col) == 3:
                (ntitle, width, color) = col
            if len(col) == 4:
                (ntitle, width, color, align) = col

            assert align == "left" or align == "right"

            if align == "left":
                align = "<"
            else:
                align = ">"

            # If the header is largen than the
            width       = max(width, len(col[0]))
            header     += und(color(("{0:%s{1}}" % align).format(col[0], col[1]))) + " "
            format_str_light += color("{%s:%s%s} ", 0) % (idx, align, width)
            format_str_bold  += color("{%s:%s%s} ", 1) % (idx, align, width)

            idx += 1
        if columns:
            self.format_str_light = format_str_light + "\n"
            self.format_str_bold  = format_str_bold  + "\n"

        return header

    def write_row(self, cols, bold=False):
        fmt = self.format_str_light
        if bold:
            fmt = self.format_str_bold

        out = fmt.format(*cols)
        self.write(out)

    def write(self, out):
        if self.popen:
            self.fdc.write(out.encode())
        else:
            self.fdc.write(out)

    def __exit__(self, exc_type, exc_valye, traceback):
        self.fdc.close()
        if self.popen:
            self.popen.wait()

################################################################
# Utility Functions
################################################################

def yel(string, light=1):
    """
    Color %string.
    """
    if light:
        return "\033[93m%s\033[0m" % string
    return "\033[33m%s\033[0m" % string


def green(string, light=1):
    """
    Color %string.
    """
    if light:
        return "\033[92m%s\033[0m" % string
    return "\033[32m%s\033[0m" % string


def blu(string, light=1):
    """
    Color %string.
    """
    if light:
        return "\033[94m%s\033[0m" % string
    return "\033[34m%s\033[0m" % string

def gray(string,bold=1):
    """
    Color %string.
    """
    if bold:
        return "\033[1;37m%s\033[0m" % string
    return "\033[1;30m%s\033[0m" % string


def und(string):
    """
    Underline %string.
    """
    return "\033[4m%s\033[0m" % string

def nocolor(string, light=1):
    """
    Does not apply any color to the string
    """
    return string


def warning(msg):
    """
    Prints a warning to the terminal.
    """
    print(yel("Warning:", True), msg)
    return warning


def error(msg):
    """
    Prints an error message.
    """
    print(msg)
    return error


def rem_ansi(string):
    """
    Remove ANSI codes from string.
    """
    return ANSI_REG.sub('', string)


################################################################
# Parse Input Functions
################################################################

def parse_show(show, slocs):
    """
    Parses a show expression. Returns the matched indices (as a list of indices
    into the slocs array, the show command, and the command arguments as a
    string.
    """
    match = re.match("^([0-9, :-]*|/[^/]*/)([ghqspPfcxtd].*)?$", show)
    assert match, "invalid show expression: " + show
    if match.groups()[1] is None:
        cmd = 's'
        args = ''
    elif match.group(2):
        cmd = match.group(2)[0]
        args = match.group(2)[1:]
    else:
        assert not match.group(3), "invalid show expression: " + show

    indices = []
    # If range is '', select all
    if not match.group(1):
        return list(range(0, len(slocs))), cmd, args
    # Parse regex
    if match.group(1).startswith("/"):
        regex = re.compile(match.group(1)[1:-1])
        for idx, line in enumerate(slocs):
            if re.search(regex, line):
                indices.append(idx)
        return indices, cmd, args

    # parse literal range expressions
    for subrange in [x for x in re.split("[ ,]", match.group(1)) if x]:
        if '-' in subrange or ':' in subrange:
            if ':' in subrange:
                start, end = subrange.split(':', 1)
            else:
                start, end = subrange.split('-', 1)
            if not start:
                start = "0"
            if not end:
                end = str(len(slocs)-1)
            indices.extend(list(range(int(start), int(end) + 1)))
        else:
            indices.append(int(subrange))
    assert all([x < len(slocs) for x in indices]), "range item too large"
    return indices, cmd, args


################################################################
# Show Commands
################################################################

def show_cmd_quit(slocs, indices, cmd_arg, option):
    """
    Quits the interactive mode.
    """
    sys.exit(0)


def show_cmd_help(slocs, indices, cmd_arg, options):
    """
    Gives help and advice. This command is like a good friend.

    cmd_arg: command name or command identifier

    Commands:
        {commands}

    Examples:
        h p       -- help for the print command
        h execute -- the execute command
    """
    # Replace {commands} by the command list
    if "{commands}" in show_cmd_help.__doc__:
        commands = []
        for key, val in list(options.show_cmds.items()):
            commands.append("%s -- %s" % (key, val.__name__))
        doc = show_cmd_help \
            .__doc__ .format(commands="\n         ".join(commands))
        show_cmd_help.__doc__ = doc

    cmd = cmd_arg.strip()
    if cmd in options.show_cmds:
        help(options.show_cmds[cmd])
    elif "show_cmd_" + cmd_arg in globals():
        help(globals()["show_cmd_" + cmd_arg])
    elif not cmd:
        help(show_cmd_help)
    else:
        return warning("no help found for: " + cmd)


def show_cmd_open(slocs, indices, cmd_arg, option):
    """
    Opens $EDITOR for every match.

    This command opens the program, given by the $EDITOR environment variable,
    for every selected match at the given line.
    """
    if len(indices) > 3:
        inp = input("Matched %s lines: visit all of them? (N/y) " % len(indices))
        if not ("y" in inp or 'Y' in inp):
            return
    for idx in indices:
        sloc = rem_ansi(slocs[idx])
        lfile, lline = parse_line(sloc)
        if lfile == -1 or lline == -1:
            return error("Please specify a valid index")
        cmd = "%s +%s %s" % (EDITOR, sloc[lfile+1:lline], sloc[:lfile])
        pop = Popen(cmd, shell=True)
        pop.wait()


def show_cmd_print(slocs, indices, cmd_arg, options):
    """
    Prints all matched lines.
    """
    try:
        print_slocs(slocs, set(indices), options)
    except IOError as err:
        return error("print command failed: " + str(err))


def show_cmd_print_and_save(slocs, indices, cmd_arg, options):
    """
    Replaces the match cache by the given selection. The selected matches are
    renumbered and the new match cache is printed.
    """
    match_slocs = []
    for idx in indices:
        match_slocs.append(slocs[idx])
    # Save matched results
    dump(match_slocs)
    # Update the slocs variable
    slocs[:] = match_slocs
    # Output the matched lines (reordered)
    try:
        print_slocs(match_slocs, None, options)
    except IOError as err:
        return error("print and save command failed: " + str(err))


def show_cmd_context(slocs, indices, cmd_arg, options):
    """
    For every match, this command gives the context of the match within the
    matched file.  The cmd_arg gives the number of context lines. Default is 10
    lines of context.

    Example:
       3-5c2 -- for matches 3 till 5, print 2 lines of context
    """
    try:
        context_lines = int(cmd_arg)
    except ValueError:
        context_lines = 10
    try:
        print_contexts(slocs, indices, context_lines, options)
    except IOError as err:
        return error("context command failed: " + str(err))


def show_cmd_files(slocs, indices, cmd_arg, options):
    """
    Prints the list of matched files.
    """
    files = {}
    with cmd_output(options, [("Count", 0, green), ("Filename", 0, nocolor)]) as pipe:
        for idx in indices:
            sloc = rem_ansi(slocs[idx])
            lfile, _ = parse_line(sloc)
            fn = sloc[:lfile]
            if not fn in files:
                files[fn] = 0
            files[fn] += 1

        for fn in sorted(files):
            pipe.write_row([files[fn], fn])

def show_cmd_execute(slocs, indices, cmd_arg, options):
    """
    Execute a command with format strings supplied form match information. When
    multiple matches are selected, a repeating group has to be supplied given.
    When no format characters are given, the filename(s) are simply appended to
    the command.

    Format Strings:
        %f -- filename of the match
        %n -- line number of match
        %m -- matched file content

    Examples:
        1x vim          -- open file of match 1
        2-7x ls -l      -- list matched files
        3x echo %f:%n   -- outout filename and match line for match 3
        2-7x echo {%n } -- print matched line numbers
    """
    format_strings = {
        '%f': '{filename}',
        '%n': '{line}',
        '%m': '{match}'
    }
    if not any((x in cmd_arg) for x in format_strings):
        if len(indices) == 1:
            cmd_arg += " %f"
        else:
            cmd_arg += '{ "%f"}'
    start = cmd_arg.find("{")
    if start != -1:
        end = cmd_arg.find("}", start)
    if start == -1 or end == -1:
        start, end = 0, len(cmd_arg)+1
        cmd_arg = "{" + cmd_arg + "}"
        if len(indices) != 1:
            return error("When having multiple matches selected, "
                         "use {..%f..%n} to repeat")
    cmd = []
    cmd_fmt = cmd_arg[start+1:end]
    for f, t in list(format_strings.items()):
        cmd_fmt = cmd_fmt.replace(f, t)
    for idx in indices:
        sloc = rem_ansi(slocs[idx])
        lfile, lline = parse_line(sloc)
        if lfile != -1 and lline != -1:
            cmd.append(cmd_fmt.format(filename=sloc[:lfile],
                                      line=sloc[lfile+1:lline],
                                      match=sloc[lline+1:]))
    cmd = cmd_arg[:start] + "".join(cmd) + cmd_arg[end+1:]
    pop = Popen(cmd, shell=True)
    pop.wait()


def show_cmd_grep(slocs, indices, cmd_arg, options):
    """
    Executes grep for a pattern on the matched files.
    """
    files = []
    for idx in indices:
        sloc = rem_ansi(slocs[idx])
        lfile, _ = parse_line(sloc)
        if not sloc[:lfile] in files:
            files.append(sloc[:lfile])

    try:
        grep_slocs = grep("-H " + quote(cmd_arg.strip()), True, False, files)
    except IOError as err:
        return error("grep failed: " + str(err))
    grep_slocs = [x for x in grep_slocs if x]

    try:
        print_slocs(grep_slocs, None, options)
    except IOError as err:
        return error("print command failed: " + str(err))

    inp = input(green("Update match cache? (N/y) "))
    if not ("y" in inp or 'Y' in inp):
        return
    dump(grep_slocs)
    slocs[:] = grep_slocs

def show_cmd_delete(slocs, indices, cmd_arg, options):
    """
    Delete matches from the list
    """
    files = []
    for idx in reversed(sorted(indices)):
        del slocs[idx]

    try:
        print_slocs(slocs, None, options)
    except IOError as err:
        return error("print command failed: " + str(err))

    dump(slocs)

def show_cmd_tree(slocs, indices, cmd_arg, options):
    """
    Show a directory tree narrowed down to all matches files. The tree
    is annoated with match counts and accumulated match counts.

    """
    try:
        depth = int(cmd_arg)
    except ValueError:
        depth = 10
    subtrees = {}
    for idx in indices:
        sloc = rem_ansi(slocs[idx])
        lfile, _ = parse_line(sloc)
        dirname = os.path.dirname(sloc[:lfile])
        dirs = list(filter(None, dirname.split(os.path.sep, depth)[:depth]))
        # All parent directories
        for til in range(0, min(depth, len(dirs))):
            dirname = os.path.sep.join(dirs[:til])
            subtrees[dirname] = subtrees.get(dirname, 0+0j) + 1
        dirname = os.path.sep.join(dirs)
        subtrees[dirname] = subtrees.get(dirname, 0+0j) + 1j

    col_0 = max([len(str(int(x.real+x.imag))) for x in subtrees.values()])
    col_1 = max([len(str(int(x.imag))) for x in subtrees.values()])

    with cmd_output(options, [("Sum", col_0, yel),
                              ("Count", col_1, green),
                              ("Directory", 0, nocolor)]) as pipe:
        for dirname, count in sorted(subtrees.items(), key= lambda x: (x[0], len(x[0]))):
            if not dirname:
                directory = "."
                prefix = ""
            else:
                directory = os.path.basename(dirname)
                prefix = os.path.dirname(dirname)
                if prefix:
                    prefix += "/"

            pipe.write_row([int(count.imag + count.real),
                            int(count.imag),
                            gray(prefix, False) + gray(directory)])


################################################################
# Backend Input/Output Functions
################################################################

def print_slocs(slocs, indices, options):
    """
    Print SLOCS on terminal.
    """
    max_indx = len(str(len(slocs)))
    max_file = 0
    max_line = 0

    lengths = array('i', [])

    pline = parse_line  # makes it faster by avoiding function lookups
    for i in range(0, len(slocs)):
        if indices is not None and i not in indices:
            lengths.append(-1)
            lengths.append(-1)
            continue
        sloc = rem_ansi(slocs[i])
        lfile, lline = pline(sloc)
        lengths.append(lfile)
        lengths.append(lline)
        if lfile > max_file:
            max_file = lfile
        if (lline-lfile) > max_line:
            max_line = (lline-lfile)

    with cmd_output(options, [("Index", max_indx, yel),
                              ("File", max_file, blu, "left"),
                              ("Line", max_line, green),
                              ("Content", 0, nocolor)]) as pipe:
        lfile, lline, lcount = 0, 0, 0
        for i in range(0, len(slocs)):
            # If we have an index set, print only those
            if indices is not None and i not in indices:
                continue

            sloc = rem_ansi(slocs[i])
            lfile = lengths[i*2] + 1
            lline = lengths[i*2 + 1] + 1

            if lfile == 0 or lline == 0:
                pipe.write(yel("-" * (max_indx+max_file+max_line+2)) + " " + sloc + "\n")
                continue

            lcount += 1

            fname = sloc[:lfile-1]
            if fname.startswith("./"):
                fname = fname[2:]
            pipe.write_row([i, fname, sloc[lfile:lline-1], slocs[i][lline:].lstrip()],
                           bold=(lcount % 2))


def execute(cmd):
    """
    Execute %cmd and return stdout.  Exit in case of error.
    """
    pop = Popen(cmd, stdout=PIPE, stderr=STDOUT, shell=True)
    (stdout, _) = pop.communicate()  # wait until finished
    stdout = stdout.decode(errors='replace')
    if pop.returncode != 0:
        if stdout != '':
            sys.exit("Command failed: %s\n%s" % (cmd, stdout))
    return stdout


def grep(grep_args, nogit, nogitsubmodules, files=None):
    """
    Search symbol in current Git tree and return the output. If %nogit is set
    grep is called instead of git grep.
    """
    grep_args = "-In --color=always %s" % grep_args

    if nogit is True:
        # overwrite grep colors to only highlight matches
        colors = "GREP_COLORS='ms=01;31:mc=:sl=:cx=:fn=:ln=:bn=:se='"
        if files is None:
            grep_args += " -r ."
        else:
            for filename in files:
                grep_args += " %s" % quote(filename)
        return execute("%s grep -Z %s" % (colors, grep_args)).rsplit("\n")

    colors = "-c 'color.grep.match=red bold'"
    git_grep_cmd = "HOME= git %s grep -z %s" % (colors, grep_args)
    git_grep_results = execute(git_grep_cmd).rsplit("\n")

    # When submodules are ignored, we can return here.
    if nogitsubmodules is True:
        return git_grep_results

    cwd = os.path.abspath(os.path.curdir)
    # Get all submodules (recursive)
    list_cmd = "git submodule --quiet foreach --recursive %s" % \
               quote('echo "$toplevel/$path"')
    submodules = execute(list_cmd).rsplit("\n")
    for submodule in [x for x in submodules if x]:
        # check if submodule is below the current working directory
        submodule = os.path.normpath(submodule)
        if os.path.commonprefix([submodule, cwd]) != cwd:
            continue
        # Get the path relative to the CWD
        submodule = os.path.relpath(submodule, cwd)

        # Start grep within the submodule
        sub_grep_cmd = "cd %s && %s" % (quote(submodule), git_grep_cmd)
        lines = execute(sub_grep_cmd).rsplit("\n")
        # Prepend the relative submodule path to each line
        for line in [x for x in lines if x]:
            git_grep_results.append(os.path.join(submodule, line))

    return git_grep_results


old_child = None


def dump(data):
    """
    Fork and dump %data to the local cache.
    """
    global old_child
    if old_child:
        os.kill(old_child, 15)
        os.waitpid(old_child, 0)

    child = os.fork()
    if child:
        old_child = child
        return

    # child process
    cwd = os.getcwd()
    data.insert(0, cwd)
    if not os.path.exists(os.path.dirname(CACHE)):
        os.makedirs(os.path.dirname(CACHE))
    # Remove old cache
    if os.path.exists(CACHE):
        os.unlink(CACHE)
    pickle.dump(data, open(CACHE, "wb"))
    sys.exit(0)


def load():
    """
    Load and return data from the local cache.
    """
    try:
        return pickle.load(open(CACHE, "rb"))
    except (IOError, pickle.PickleError):
        return None


def merge_colors(str_a, str_b):
    """Merge the color codes from two strings. If the two strings are not
       mergable, return the first string.

       This function searches the earliest 0x1b in both strings, and
       appends the common prefix to the returning string.

       a = "abc{blue}xyz"
       b = "abc         x{yellow}yz"
               ^- Snip here first.

       The preceeding color codes are appended to the return string.
       And the process is repeated until both strings are consumed.

       ret_str = "abc{blue}b{yellow}yz"
    """
    original_string = str_b
    ret_str = ""
    while len(str_a) and len(str_b):
        m0 = re.match(ANSI_REG, str_a)
        if m0:
            ret_str += str_a[:m0.end(0)]
            str_a = str_a[m0.end(0):]
        m1 = re.match(ANSI_REG, str_b)
        if m1:
            ret_str += str_b[:m1.end(0)]
            str_b = str_b[m1.end(0):]
        if not m0 and not m1:
            idx = str_a.find("\x1b")
            idx_b = str_b.find("\x1b")
            if idx == -1 or (idx_b < idx and idx_b > 0):
                idx = idx_b
            if idx == -1:
                idx = len(str_a)
            if str_a[:idx] != str_b[:idx]:
                return original_string
            ret_str += str_a[:idx]
            str_a, str_b = str_a[idx:], str_b[idx:]
    return ret_str

def colorize_code_snippet(filename, snippet_lines, start_of_file):
    """Colorizes the code snippet (snippet_lines) with pygments and uses
       the filename and first N bytes (start_of_file) to identify the
       file type.

    """
    try:
        lexer = guess_lexer_for_filename(filename, start_of_file)
    except:
        try:
            lexer = guess_lexer(start_of_file)
        except:
            lexer = None
    if lexer:
        empty_lines_before = len(list(takewhile(lambda x: x == "", snippet_lines)))
        empty_lines_after  = len(list(takewhile(lambda x: x == "", reversed(snippet_lines))))

        out = highlight("\n".join(snippet_lines), lexer, TerminalFormatter())
        line_count = len(snippet_lines)
        snippet_lines = out.rstrip("\n").split("\n")
        # pygment seems to remove empty lines before the source code
        snippet_lines = [""]*empty_lines_before + snippet_lines + [""]*empty_lines_after
    return snippet_lines


def print_contexts(slocs, indices, context_lines, options):
    """
    Prints context_lines lines before and after the matches given by
    the indices into the slocs array.
    """
    with cmd_output(options, []) as pipe:
        for idx in indices:
            sloc = slocs[idx]
            lfile, lline = parse_line(rem_ansi(sloc))
            if lfile == -1 or lline == -1:
                continue
            filename = sloc[:lfile]
            match_line = int(sloc[lfile+1:lline])-1
            match_content = sloc[lline+1:]

            with open(filename) as fd:
                encoding = sys.getfilesystemencoding()
                content = fd.read()
                lines = content.split("\n")

                start = max(0, match_line - context_lines)
                end = min(match_line + context_lines, len(lines)-1)
                width = len(str(end))
                pipe.set_columns([("N", width, green), ("Context", 0, nocolor)])

                # Write Separator
                delim = "%s %s %s %s" % (yel("-----"),
                                         yel(idx, True),
                                         blu(filename, True),
                                         green("(%s-%s)" % (start+1, end+1)))
                pipe.write("%s %s\n" % (delim, yel("-" * (79-len(rem_ansi(delim))))))
                output_lines = [x.rstrip("\n") for x in lines[start:end+1]]
                if PYGMENTS_AVAILABLE:
                    line_count = len(output_lines)
                    start_of_file = "".join(lines[:min(30,len(lines))])
                    added_before = 0
                    added_after = 0
                    # Add a little bit of context to improve the highlighting
                    while True:
                        if added_before > 30 or (start-added_before-1) < 0:
                            break
                        added_before += 1
                        output_lines = [lines[start - added_before].rstrip("\n")] + output_lines
                        if output_lines[0] == '':
                            break

                    while True:
                        if added_after > 30 or (end+added_after+1) >= len(lines):
                            break
                        added_after += 1
                        output_lines += [lines[end+added_after].rstrip("\n")]
                        if output_lines[-1] == '':
                            break

                    output_lines = colorize_code_snippet(filename, output_lines, start_of_file)
                    output_lines = output_lines[added_before:added_before+line_count]
                    output_lines[match_line-start] = merge_colors(output_lines[match_line-start], match_content)
                else:
                    output_lines[match_line-start] = match_content

                # Output lines for this context snippet
                for line_nr, text in enumerate(output_lines, start+1):
                    pipe.write_row([line_nr, text], bold=(line_nr == (match_line+1)))


if __name__ == "__main__":
    main()
